from gcline import Line
from gclayer import Layer
from util import listsplit

"""Each parser should have a detect() and a parse(). parse() returns (preamble layer, layer list)"""

#PrusaSlicer: has header comment "generated by PrusaSlicer", has
# "BEFORE_LAYER_CHANGE" and "AFTER_LAYER_CHANGE" comments,
# although these are configured per-printer in .ini files. Looks
# like new layers start at "BEFORE_LAYER_CHANGE".
#Simplify3D: has header comment "generated by Simplify3D", has
# comments "layer N" where N is a number.
#Slic3r 1.3: has header comment "generated by Slic3r", no comments
# to denote layer changes
#Cura 15: has footer comment "CURA_PROFILE_STRING", has comments
# "LAYER:N" where N is a number.
#Cura 4.6: has header comment "Generated with Cura_SteamEngine",
# has comment "LAYER:N" where N is a number.
#
#Cura 4.12: has header comment "Generated with Cura_SteamEngine",
# has comment "LAYER:N" where N is a number; in each layer, has comments
# for different types of feature:
#   ;MESH:10x10x10 cube.stl
#   ;TYPE:WALL-INNER
#   ;TYPE:WALL-OUTER
#   ;TYPE:SKIN
#   ;MESH:NONMESH
#   ;TYPE:SKIRT

class Cura4:
	@classmethod
	def detect(cls, lines):
		return any('Cura_SteamEngine' in l for l in lines[:20])


	#Convention is that preamble "layer" is -1, first print layer is 0
	@classmethod
	def parse(cls, lines):
		"""Parse Cura4 Gcode into layers using the ;LAYER:N comment line."""
		layergroups = listsplit(
				[Line(l, lineno=n) for n,l in enumerate(lines)],
				lambda i: i.line.startswith(';LAYER:'))

		return Layer(layergroups[0], layernum='preamble'), [
				Layer(layergroup, layernum=i) for i,layergroup in enumerate(layergroups[1:])]



PARSERS = [Cura4]
